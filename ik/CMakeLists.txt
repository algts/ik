include (CheckIncludeFiles)
include (CheckCSourceCompiles)
include (CMakeDependentOption)

list (APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

if (${CMAKE_BUILD_TYPE} MATCHES Debug)
    set (DEBUG_FEATURE ON)
else ()
    set (RELEASE_FEATURE ON)
endif ()

set (IK_LIB_TYPE "SHARED" CACHE STRING "SHARED or STATIC library")
option (IK_BENCHMARKS "Whether to build benchmark tests or not (requires C++)" OFF)
option (IK_BUILDINFO "If true (default) the updated build number is written to a header, which causes the library to recompile info.c. This can get annoying for developers, so disable this if you are annoyed." ${RELEASE_FEATURE})
option (IK_LOGGING "Enable or disable logging support (replaces all log functions with NOP when disabled)" ON)
option (IK_PIC "Position independent code when building as a static library" ON)
set (IK_PRECISION "double" CACHE STRING "Type to use for real numbers")
option (IK_PROFILING "Compiles with -pg with GCC/Clang" OFF)
option (IK_PYTHON "Compiles the library so it can also be loaded as a python module" OFF)
set (IK_PYTHON_VERSION 3 CACHE STRING "The version of python to use if IK_PYTHON=ON")
option (IK_TESTS "Whether to build unit tests or not (requires C++)" OFF)

string (REPLACE " " "_" IK_PRECISION_CAPS_AND_NO_SPACES ${IK_PRECISION})
string (TOUPPER ${IK_PRECISION_CAPS_AND_NO_SPACES} IK_PRECISION_CAPS_AND_NO_SPACES)

if (IK_BENCHMARKS OR IK_TESTS)
    set (CXX_LANGUAGE "CXX")
endif ()

project ("ik"
    VERSION 0.2.0
    LANGUAGES C ${CXX_LANGUAGE})

# Must use GNUInstallDirs to install libraries into correct locations on all
# platforms.
include (GNUInstallDirs)

# Determine visibility macros if the library is a shared library.
if (IK_LIB_TYPE MATCHES "SHARED")
    check_c_source_compiles ("__declspec(dllexport) void foo(void); int main(void) { return 0; }" DLLEXPORT_VISIBILITY)
    check_c_source_compiles ("__declspec(dllimport) void foo(void); int main(void) { return 0; }" DLLIMPORT_VISIBILITY)
    check_c_source_compiles ("__attribute__((visibility(\"default\"))) void foo(void); int main(void) { return 0; }" DEFAULT_VISIBILITY)
    check_c_source_compiles ("__attribute__((visibility(\"hidden\"))) void foo(void); int main(void) { return 0; }"  HIDDEN_VISIBILITY)
    if (DLLEXPORT_VISIBILITY AND DLLIMPORT_VISIBILITY)
        set (IK_HELPER_API_EXPORT "__declspec(dllexport)")
        set (IK_HELPER_API_IMPORT "__declspec(dllimport)")
        set (IK_HELPER_API_LOCAL "")
    elseif (DEFAULT_VISIBILITY AND HIDDEN_VISIBILITY)
        set (IK_HELPER_API_EXPORT "__attribute__((visibility(\"default\")))")
        set (IK_HELPER_API_IMPORT "__attribute__((visibility(\"default\")))")
        set (IK_HELPER_API_LOCAL  "__attribute__((visibility(\"hidden\")))")
    else ()
        message (FATAL_ERROR "Don't know how to define visibility macros for this compiler")
    endif ()
else ()
    set (IK_HELPER_API_EXPORT "")
    set (IK_HELPER_API_IMPORT "")
    set (IK_HELPER_API_LOCAL  "")
endif ()

# Check if we need to use pstdint.h or if stdint.h is available
check_include_files ("stdint.h" IK_HAVE_STDINT_H)

# Check if we can warn about unused function results
check_c_source_compiles ("int __attribute__((warn_unused_result)) f(void) { return 1; } int main(void) { return f(4); }" HAVE_WARN_UNUSED)
check_c_source_compiles ("int _Check_return_ f(void) { return 1; } int main(void) { return f(4); }" HAVE_CHECK_RETURN)
if (HAVE_WARN_UNUSED)
    set (IK_WARN_UNUSED "__attribute__((warn_unused_result))")
elseif (HAVE_CHECK_RETURN)
    set (IK_WARN_UNUSED "_Check_return_")
endif ()

set (IK_HOST_COMPUTER ${CMAKE_HOST_SYSTEM})
set (IK_COMPILER ${CMAKE_C_COMPILER_ID})
find_program (UNAME_PROGRAM uname)
if (UNAME_PROGRAM)
    execute_process (
        COMMAND ${UNAME_PROGRAM} -ormpi
        OUTPUT_VARIABLE IK_HOST_COMPUTER)
    string (REPLACE "\n" "" IK_HOST_COMPUTER ${IK_HOST_COMPUTER})
else ()
    set (IK_HOST_COMPUTER ${CMAKE_HOST_SYSTEM_NAME})
endif ()

# Required for build info
find_package (Git)
if (GIT_FOUND)
    execute_process (COMMAND ${GIT_EXECUTABLE} describe --tags RESULT_VARIABLE RESULT OUTPUT_VARIABLE COMMIT_TAG)
    if (RESULT)
        set (COMMIT_TAG "(unknown tag)")
    else ()
        string (REPLACE "\n" "" COMMIT_TAG ${COMMIT_TAG})
    endif ()
    execute_process (COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD RESULT_VARIABLE RESULT OUTPUT_VARIABLE COMMIT_HASH)
    if (RESULT)
        set (COMMIT_HASH "(commit hash unknown)")
    else ()
        string (REPLACE "\n" "" COMMIT_HASH ${COMMIT_HASH})
    endif ()
    set (IK_COMMIT_INFO "${COMMIT_TAG} (${COMMIT_HASH})")
else ()
    set (IK_COMMIT_INFO "unknown (git not found!)")
    message (WARNING "Git not found. Build will not contain git revision info.")
endif ()

configure_file ("templates/config.h.in"
                "include/ik/config.h")

set (IK_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
configure_file ("templates/info.c.in" "src/info.c")

###############################################################################
# All source file definitions
###############################################################################

# Update build info every time the project is compiled
set (UPDATE_INFO_HEADER "${CMAKE_CURRENT_BINARY_DIR}/include/ik/build_info.h")
add_custom_target (ik_build_info_header
    COMMAND ${CMAKE_COMMAND}
            -DOUTPUT_FILE=${UPDATE_INFO_HEADER}
            -DIK_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}
            -DIK_BINARY_DIR=${CMAKE_CURRENT_BINARY_DIR}
            -DIK_BUILDINFO=${IK_BUILDINFO}
            -P "${CMAKE_CURRENT_SOURCE_DIR}/cmake/generate_timestamp.cmake"
    COMMENT "Updating build information"
    VERBATIM)
add_custom_command (
    OUTPUT ${UPDATE_INFO_HEADER}
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/nop.cmake
    DEPENDS ik_build_info_header)

###############################################################################
# Main library
###############################################################################

add_library (ik_obj OBJECT
    ${UPDATE_INFO_HEADER}
    "src/algorithm.c"
    "src/attachment.c"
    "src/bone.c"
    "src/chain_tree.c"
    "src/constraint.c"
    "src/effector.c"
    "src/init.c"
    #"src/mat3x3.c"
    "src/node.c"
    "src/pole.c"
    "src/pose.c"
    "src/refcount.c"
    "src/solver.c"
    "src/solver_b1.c"
    "src/solver_b2.c"
    "src/solver_group.c"
    #"src/solver_fabrik.c"
    "src/solver_mss.c"
    "src/subtree.c"
    "src/transform.c"
    "src/tree_object.c"
    #"src/util.c"
    $<$<BOOL:${IK_LOGGING}>:src/log.c>
    $<$<NOT:$<BOOL:${IK_TESTS}>>:src/tests/tests_run_stub.c>
    "${CMAKE_CURRENT_BINARY_DIR}/src/info.c"
    "templates/info.c.in")
set_target_properties (ik_obj
    PROPERTIES
        C_STANDARD 90
        POSITION_INDEPENDENT_CODE ${IK_PIC})
target_include_directories (ik_obj
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)
target_compile_definitions (ik_obj
    PRIVATE IK_BUILDING)
target_compile_options (ik_obj
    PRIVATE $<$<C_COMPILER_ID:MSVC>:
        /EHa /MTd /W4 /wd4305 /wd4201 /wd4706 /wd4100 /wd4244 /wd4477 /wd4003 /D_CRT_SECURE_NO_DEPRECATE
    >
    PRIVATE $<$<C_COMPILER_ID:GNU>:
        -W -Wall -Wextra -Wshadow -Wconversion -Wno-unused-parameter -Wno-conversion -Wno-implicit-fallthrough -Wno-overlength-strings
        -fno-strict-aliasing -ffast-math -flto
        $<$<BOOL:${IK_PROFILING}>:-pg -fno-omit-frame-pointer>
    >
    PRIVATE $<$<C_COMPILER_ID:Clang>:
        -W -Wall -Wextra -Wshadow -Wconversion -Wno-unused-parameter -Wno-conversion -Wno-implicit-fallthrough -Wno-overlength-strings
        -fno-strict-aliasing -ffast-math
        $<$<BOOL:${IK_PROFILING}>:-pg -fno-omit-frame-pointer>
    >
)

target_link_libraries (ik_obj PUBLIC cstructures)

###############################################################################
# Python bindings
###############################################################################

if (IK_PYTHON)
    find_package (Python COMPONENTS Development REQUIRED)

    file (GLOB IK_PYTHON_DOCFILES "include/python/ik/python/doc/*")
    set (IK_DOCSTRINGS_HEADER "${CMAKE_CURRENT_BINARY_DIR}/include/ik/python/ik_docstrings.h")
    set (IK_DOCSTRINGS_SOURCE "${CMAKE_CURRENT_BINARY_DIR}/src/ik_docstrings.c")
    add_custom_command (
        OUTPUT
            ${IK_DOCSTRINGS_HEADER}
            ${IK_DOCSTRINGS_SOURCE}
        COMMAND ${CMAKE_COMMAND}
            -DIK_DOCSTRINGS_HEADER=${IK_DOCSTRINGS_HEADER}
            -DIK_DOCSTRINGS_SOURCE=${IK_DOCSTRINGS_SOURCE}
            -DIK_PYTHON_DOCFILES="${IK_PYTHON_DOCFILES}"
            -P "${CMAKE_CURRENT_SOURCE_DIR}/cmake/generate_python_docstrings.cmake"
        DEPENDS
            "cmake/generate_python_docstrings.cmake"
            ${IK_PYTHON_DOCFILES})
    add_custom_target (ik_generate_docstrings ALL
        DEPENDS
            ${IK_DOCSTRINGS_HEADER}
            ${IK_DOCSTRINGS_SOURCE})

    add_library (ik_python_obj OBJECT
        "include/python/ik/python/ik_type_Attachment.h"
        "include/python/ik/python/ik_type_Algorithm.h"
        "include/python/ik/python/ik_type_Constraint.h"
        "include/python/ik/python/ik_type_Effector.h"
        "include/python/ik/python/ik_type_Info.h"
        "include/python/ik/python/ik_type_ModuleRef.h"
        "include/python/ik/python/ik_type_Pole.h"
        "include/python/ik/python/ik_type_Quat.h"
        "include/python/ik/python/ik_type_TreeObject.h"
        "include/python/ik/python/ik_type_Vec3.h"
        $<$<BOOL:${IK_LOGGING}>:include/python/ik/python/ik_type_Log.h>
        "src/python/ik_module.c"
        "src/python/ik_type_Attachment.c"
        "src/python/ik_type_Algorithm.c"
        "src/python/ik_type_Constraint.c"
        "src/python/ik_type_Effector.c"
        "src/python/ik_type_Info.c"
        "src/python/ik_type_Mat3x4.c"
        "src/python/ik_type_ModuleRef.c"
        "src/python/ik_type_Pole.c"
        "src/python/ik_type_Pose.c"
        "src/python/ik_type_Quat.c"
        "src/python/ik_type_Solver.c"
        "src/python/ik_type_TreeObject.c"
        "src/python/ik_type_Vec3.c"
        $<$<BOOL:${IK_LOGGING}>:src/python/ik_type_Log.c>
        ${IK_DOCSTRINGS_HEADER}
        ${IK_DOCSTRINGS_SOURCE})
    set_target_properties (ik_python_obj
        PROPERTIES
            C_STANDARD 99
            POSITION_INDEPENDENT_CODE ${IK_PIC})
    target_include_directories (ik_python_obj
        PUBLIC
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/python>)
    target_compile_definitions (ik_obj
        PRIVATE IK_BUILDING)
    target_compile_options (ik_python_obj
        PUBLIC $<$<C_COMPILER_ID:MSVC>:
            /EHa /MTd /W4 /wd4115 /wd4201 /wd4100 /D_CRT_SECURE_NO_DEPRECATE
        >
        PUBLIC $<$<C_COMPILER_ID:GNU>:
            -Wall -Wextra -pedantic -pedantic-errors -Wno-missing-field-initializers -Wshadow -Wno-cast-function-type
            $<$<BOOL:${IK_PROFILING}>:-pg -fno-omit-frame-pointer>
        >
        PUBLIC $<$<C_COMPILER_ID:Clang>:
            -Wall -Wextra -Werror -pedantic -pedantic-errors -Wno-missing-field-initializers -Wshadow -Wno-cast-function-type
            $<$<BOOL:${IK_PROFILING}>:-pg -fno-omit-frame-pointer>
        >
    )

    target_link_libraries (ik_python_obj PRIVATE Python::Python)
    target_link_libraries (ik_python_obj PRIVATE ik_obj)

    add_dependencies (ik_python_obj ik_generate_docstrings)
endif ()

###############################################################################
# Unit tests
###############################################################################

if (IK_TESTS)
    add_library (ik_tests_obj OBJECT
        "src/tests/environment_library_init.cpp"
        "src/tests/tests_run.cpp"
        "src/tests/test_build_solver.cpp"
        "src/tests/test_chain_tree.cpp"
        #"src/tests/test_constraint.cpp"
        "src/tests/test_effector.cpp"
        "src/tests/test_FABRIK.cpp"
        #"src/tests/test_mat3x3.cpp"
        #"src/tests/test_pole.cpp"
        "src/tests/test_quat.cpp"
        "src/tests/test_refcount.cpp"
        "src/tests/test_solver_b1.cpp"
        "src/tests/test_solver_b2.cpp"
        "src/tests/test_solver_combine.cpp"
        # "src/tests/test_transform_chain.cpp"
        # "src/tests/test_transform_chain_rotations.cpp"
        # "src/tests/test_transform_chain_translations.cpp"
        # "src/tests/test_transform_node.cpp"
        # "src/tests/test_transform_node_rotations.cpp"
        # "src/tests/test_transform_node_translations.cpp"
        "src/tests/test_tree_object.cpp"
        "src/tests/test_tree_object_conversions.cpp"
        "src/tests/test_transform_node_to_bone.cpp"
        # "src/tests/test_TWO_BONE.cpp"
        "src/tests/test_vec3.cpp"
        $<$<BOOL:${IK_PYTHON}>:${CMAKE_CURRENT_BINARY_DIR}/src/test_python_bindings.cpp>)
    set_target_properties (ik_tests_obj
        PROPERTIES
            POSITION_INDEPENDENT_CODE ${IK_PIC})
    target_compile_options (ik_tests_obj
        PRIVATE $<$<C_COMPILER_ID:MSVC>:
            /MTd /D_CRT_SECURE_NO_DEPRECATE
        >
        PRIVATE $<$<C_COMPILER_ID:GNU>:
            -Wno-unused-result
            $<$<BOOL:${IK_PROFILING}>:-pg -fno-omit-frame-pointer>
        >
        PRIVATE $<$<C_COMPILER_ID:Clang>:
            -Wno-unused-result
            $<$<BOOL:${IK_PROFILING}>:-pg -fno-omit-frame-pointer>
        >
    )
    target_compile_definitions (ik_tests_obj
        PRIVATE IK_BUILDING)  # The library is being built
    target_link_libraries (ik_tests_obj PRIVATE ik_obj)
    target_link_libraries (ik_tests_obj PRIVATE gtest)
    target_link_libraries (ik_tests_obj PRIVATE gmock)

    if (IK_PYTHON)
        set (IK_PYTHON_TESTS_SOURCES
            "src/tests/python/test_Algorithm.py"
            "src/tests/python/test_Effector.py"
            "src/tests/python/test_info.py"
            "src/tests/python/test_log.py"
            "src/tests/python/test_Pose.py"
            "src/tests/python/test_Quat.py"
            "src/tests/python/test_Solver.py"
            "src/tests/python/test_TreeObject.py"
            "src/tests/python/test_Vec3.py")
        add_custom_command (
            OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/src/test_python_bindings.cpp"
            COMMAND ${CMAKE_COMMAND}
                -DIK_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}
                -DIK_BINARY_DIR=${CMAKE_CURRENT_BINARY_DIR}
                -DIK_PYTHON_TESTS_SOURCES="${IK_PYTHON_TESTS_SOURCES}"
                -P "${CMAKE_CURRENT_SOURCE_DIR}/cmake/generate_python_unit_tests.cmake"
            DEPENDS
                "cmake/generate_python_unit_tests.cmake"
                "templates/test_python_bindings.cpp.in"
                ${IK_PYTHON_TESTS_SOURCES})
        add_custom_target (ik_generate_unit_tests ALL
            DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/src/test_python_bindings.cpp")
        add_dependencies (ik_tests_obj ik_generate_unit_tests)
        target_sources (ik_python_obj PRIVATE ${IK_PYTHON_TESTS_SOURCES})
        target_link_libraries (ik_tests_obj PRIVATE Python::Python)
    endif ()
endif ()

###############################################################################
# Benchmarks
###############################################################################

if (IK_BENCHMARKS)
    # ik benchmark object files
    add_library (ik_benchmarks_obj OBJECT
        "src/benchmarks/bench_FABRIK_solver.cpp"
        "src/benchmarks/bench_solver.cpp")
    target_include_directories (ik_benchmarks_obj
        PRIVATE
            ${CMAKE_CURRENT_BINARY_DIR}/include/public
            ${CMAKE_CURRENT_BINARY_DIR}/include/private
            ${CMAKE_CURRENT_SOURCE_DIR}/include/public
            ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/benchmark/include
            $<$<BOOL:${IK_PYTHON}>:${PYTHON_INCLUDE_DIRS}>)
    set_target_properties (ik_benchmarks_obj
        PROPERTIES POSITION_INDEPENDENT_CODE ${IK_PIC})
    target_compile_options (ik_benchmarks_obj
        PRIVATE $<$<C_COMPILER_ID:MSVC>:
            /MTd /D_CRT_SECURE_NO_DEPRECATE
        >
        PRIVATE $<$<C_COMPILER_ID:GNU>:
            -Wno-unused-result -flto
            $<$<BOOL:${IK_PROFILING}>:-pg -fno-omit-frame-pointer>
        >
        PRIVATE $<$<C_COMPILER_ID:Clang>:
            -Wno-unused-result
            $<$<BOOL:${IK_PROFILING}>:-pg -fno-omit-frame-pointer>
        >
    )
    target_compile_definitions (ik_benchmarks_obj
        PRIVATE IK_BUILDING  # The library is being built
        PRIVATE MS_NO_COREDLL # Stops pyconfig.h from trying to autolink python libraries; cmake handles which libraries get linked
        PRIVATE $<$<CONFIG:Debug>:
            DEBUG
        >
    )
endif ()

###############################################################################
# The actual library
###############################################################################

add_library (ik ${IK_LIB_TYPE}
    $<TARGET_OBJECTS:ik_obj>
    $<$<BOOL:${IK_BENCHMARKS}>:$<TARGET_OBJECTS:ik_benchmarks_obj>>
    $<$<BOOL:${IK_PYTHON}>:$<TARGET_OBJECTS:ik_python_obj>>
    $<$<BOOL:${IK_TESTS}>:$<TARGET_OBJECTS:ik_tests_obj>>)
set_target_properties (ik PROPERTIES
    PREFIX ""
    DEBUG_POSTFIX ""
    OUTPUT_NAME "ik"
    SOVERSION ${PROJECT_VERSION})
# This causes the include directories to be exposed to targets that link to "ik"
target_link_libraries (ik
    PUBLIC
        ik_obj
        $<$<BOOL:${IK_BENCHMARKS}>:ik_benchmarks_obj>
        $<$<BOOL:${IK_PYTHON}>:ik_python_obj>
        $<$<BOOL:${IK_TESTS}>:ik_tests_obj>)

if (IK_TESTS)
    add_executable (iktests "src/tests/tests_main.c")
    target_link_libraries (iktests PUBLIC ik)
    set_target_properties (iktests PROPERTIES
        INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
    install (TARGETS iktests
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
endif ()

if (IK_BENCHMARKS)
    target_link_libraries (ik PRIVATE benchmark)
    add_executable (ikbenchmarks "src/benchmarks/run_benchmarks.cpp")
    target_link_libraries (ikbenchmarks PUBLIC ik)
    set_target_properties (ikbenchmarks PROPERTIES
        INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
    install (TARGETS ikbenchmarks
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
endif ()

###############################################################################
# Dependency settings
###############################################################################

message (STATUS "------------------------------------------------------------")
message (STATUS "IK settings")
message (STATUS " + Configuration: ${CMAKE_BUILD_TYPE}")
message (STATUS " + Library type: ${IK_LIB_TYPE}")
message (STATUS " + API Name: ${IK_API_NAME}")
message (STATUS " + Benchmarks: ${IK_BENCHMARKS}")
message (STATUS " + Buildinfo: ${IK_BUILDINFO}")
message (STATUS " + DOT Export: ${IK_DOT_EXPORT}")
message (STATUS " + Memory debugging: ${IK_MEMORY_DEBUGGING}")
message (STATUS " + Memory backtraces: ${IK_MEMORY_BACKTRACE}")
message (STATUS " + Hashmap statistics: ${IK_HASHMAP_STATS}")
message (STATUS " + PIC (Position independent code): ${IK_PIC}")
message (STATUS " + Precision: ${IK_PRECISION}")
message (STATUS " + Profiling: ${IK_PROFILING}")
message (STATUS " + Python bindings: ${IK_PYTHON}")
message (STATUS " + Python version: ${IK_PYTHON_VERSION}")
message (STATUS " + Unit Tests: ${IK_TESTS}")
message (STATUS " + 64-bit vector: ${IK_VECTOR_64BIT}")
message (STATUS "------------------------------------------------------------")

###############################################################################
# install targets
###############################################################################

# make install to correct locations provided by GNUInstallDirs
install (
    TARGETS
        ik
        ik_obj
    EXPORT
        ikConfig
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
install (
    DIRECTORY
        "include/public/ik"
        "${CMAKE_CURRENT_BINARY_DIR}/include/public/ik"
    DESTINATION
        ${CMAKE_INSTALL_INCLUDEDIR})

# Makes the project importable from the install directory
install (
    EXPORT ikConfig
    DESTINATION "share/ik/cmake")

# Makes the project importable from the build directory
export (
    TARGETS
        ik
        ik_obj
    FILE
        ikConfig.cmake)

#export (PACKAGE ik)
