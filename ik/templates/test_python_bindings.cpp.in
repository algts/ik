#include "gmock/gmock.h"
#include "Python.h"
#include "ik/ik.h"
#include "ik/python.h"

#define NAME python_bindings

PyMODINIT_FUNC PyInit_ik(void);

using namespace ::testing;

void init_python(void)
{
    PyImport_AppendInittab("ik", PyInit_ik);
    Py_Initialize();
    // "module 'sys' has no attribute 'argv'"
    PyRun_SimpleString("import sys\nsys.argv = ['']");
    // sys.exit() would cause the program to exit. Raise an exception instead so PyRun_SimpleString() returns non-zero if exit was called
    PyRun_SimpleString(
        "import sys\n"
        "def stub(x):\n"
        "    if x:\n"
        "        raise RuntimeError(\"sys.exit({})\".format(x))\n"
        "sys.exit = stub");
}

int deinit_python()
{
    return Py_FinalizeEx();
}

class NAME : public testing::Test
{
public:
    void SetUp() override
    {
        init_python();
    }

    void TearDown() override
    {
#if defined(IK_PYTHON_REFCOUNT_DEBUGGING)
        int active_python_objects = ik_python_active_instances();
        EXPECT_THAT(active_python_objects, Eq(0));
        if (active_python_objects != 0)
            ik_python_print_active_instances();
#endif
        EXPECT_THAT(deinit_python(), Eq(0));
    }
};

TEST_F(NAME, module_import_many_times)
{
    for (int i = 0; i != 20; ++i)
    {
        PyRun_SimpleString("import ik");
        deinit_python();
        init_python();
    }
}
